{"version":3,"sources":["auth/signup.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAkCA;gBAGI,yBACY,GAAe,EAAU,YAAyB,EAClD,aAA2B;oBAD3B,QAAG,GAAH,GAAG,CAAY;oBAAU,iBAAY,GAAZ,YAAY,CAAa;oBAClD,kBAAa,GAAb,aAAa,CAAc;gBAAK,CAAC;gBAE7C,kCAAQ,GAAR;oBAAA,iBAQC;oBAPG,IAAM,IAAI,GAAG,IAAI,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACpI,qBAAqB;oBACrB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;yBACzB,SAAS,CACN,UAAA,IAAI,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAjB,CAAiB,EACzB,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAArC,CAAqC,CACjD,CAAA;gBACT,CAAC;gBAED,kCAAQ,GAAR;oBACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;wBACzB,SAAS,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;wBACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;wBACnC,KAAK,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,OAAO,CAAC;gCAC3B,mBAAU,CAAC,QAAQ;gCACnB,IAAI,CAAC,OAAO;6BACf,CAAC,CAAC;wBACH,QAAQ,EAAE,CAAC,EAAE,EAAE,mBAAU,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACP,CAAC;gBAEO,iCAAO,GAAf,UAAgB,OAAgB;oBAC5B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,uIAAuI,CAAC,CAAC,CAAC,CAAC;wBAChK,MAAM,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;oBAC/B,CAAC;gBACL,CAAC;gBA5DL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,WAAW;wBACrB,QAAQ,EAAE,6xCAsBT;wBACD,UAAU,EAAE,EAAE;qBACjB,CAAC;;mCAAA;gBAmCF,sBAAC;YAAD,CAlCA,AAkCC,IAAA;YAlCD,6CAkCC,CAAA","file":"auth/signup.component.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, ControlGroup, Validators, Control } from \"@angular/common\";\n\nimport { User } from \"./user\";\nimport { AuthService } from \"./auth.service\";\nimport { ErrorService } from \"../errors/error.service\";\n\n@Component({\n    selector: 'my-signup',\n    template: `\n        <section class=\"col-md-8 col-md-offset-2\">\n            <form [ngFormModel]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <label for=\"firstName\">First Name</label>\n                    <input [ngFormControl]=\"myForm.find('firstName')\" type=\"text\" id=\"firstName\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"lastName\">Last Name</label>\n                    <input [ngFormControl]=\"myForm.find('lastName')\" type=\"text\" id=\"lastName\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Mail</label>\n                    <input [ngFormControl]=\"myForm.find('email')\" type=\"email\" id=\"email\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input [ngFormControl]=\"myForm.find('password')\" type=\"password\" id=\"password\" class=\"form-control\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!myForm.valid\">Sign Up</button>\n            </form>\n        </section>\n    `, \n    directives: []\n})\nexport class SignupComponent implements OnInit {\n    myForm: ControlGroup;\n    user:User;\n    constructor(\n        private _fb:FormBuilder, private _authService: AuthService, \n        private _errorService: ErrorService ) { }\n\n    onSubmit() {\n        const user = new User(this.myForm.value.email, this.myForm.value.password, this.myForm.value.firstName, this.myForm.value.lastName);\n        // console.log(user);\n        this._authService.signup(user)\n            .subscribe(\n                data => console.log(data),\n                error => this._errorService.handleError(error)\n            )\n    }\n\n    ngOnInit() {\n        this.myForm = this._fb.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', Validators.compose([\n                Validators.required,\n                this.isEmail\n            ])],\n            password: ['', Validators.required]\n        });\n    }\n\n    private isEmail(control: Control): {[s: string]: boolean} {\n        if (!control.value.match(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")) {\n            return {invalidMail: true};\n        }\n    }\n}\n"],"sourceRoot":"/source/"}