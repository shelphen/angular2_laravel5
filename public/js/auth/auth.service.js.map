{"version":3,"sources":["auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBACI,qBAAqB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;gBAAG,CAAC;gBAEpC,4BAAM,GAAN,UAAO,IAAU;oBACb,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAM,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;oBAClE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;yBACzE,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;gBACxD,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAU;oBACb,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAM,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;oBAClE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;yBACrD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;gBACxD,CAAC;gBAED,4BAAM,GAAN;oBACI,YAAY,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;gBAED,gCAAU,GAAV;oBACI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC;gBAClD,CAAC;gBA1BL;oBAAC,iBAAU,EAAE;;+BAAA;gBA2Bb,kBAAC;YAAD,CA1BA,AA0BC,IAAA;YA1BD,qCA0BC,CAAA","file":"auth/auth.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Headers } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport 'rxjs/Rx';\n\nimport { User } from \"./user\";\n\n@Injectable()\nexport class AuthService {\n    constructor (private _http: Http) {}\n    \n    signup(user: User) {\n        const body = JSON.stringify(user);\n        const headers = new Headers({'Content-Type': 'application/json'});\n        return this._http.post('http://localhost:3000/user', body, {headers: headers})\n            .map(response => response.json())\n            .catch(error => Observable.throw(error.json()));\n    }\n\n    signin(user: User) {\n        const body = JSON.stringify(user);\n        const headers = new Headers({'Content-Type': 'application/json'});\n        return this._http.post('/login', body, {headers: headers})\n            .map(response => response.json())\n            .catch(error => Observable.throw(error.json()));\n    }\n    \n    logout() {\n        localStorage.clear();\n    }\n    \n    isLoggedIn() {\n        return localStorage.getItem('token') !== null;\n    }\n}"],"sourceRoot":"/source/"}